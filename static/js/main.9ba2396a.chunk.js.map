{"version":3,"sources":["components/Footer/images/logo.svg","components/FriendCard/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","friendCard","props","react_default","a","createElement","className","concat","name","replace","isGameLost","alt","src","image","onClick","handleClicked","id","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","Wrapper","children","Header","Fragment","href","score","topScore","Footer","logo","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","friends","setFriends","data","map","item","objectSpread","clicked","resetFriends","updateFriendClick","elemClass","imgClickedOnce","updatedData","resetScore","incrementScore","setState","shuffleFriends","newData","newScore","length","document","getElementById","innerHTML","highScoreArr","push","sort","arrSize","bestScore","i","j","Math","floor","random","_ref","imgContainer","getElementsByClassName","style","transform","border","_this2","components_Wrapper","components_Header","friend","FriendCard","key","occupation","location","components_Footer","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ba2396a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\nconst friendCard = (props) => {\n    return (\n      <div className=\"card\">\n        <div className={`img-container text-center ${props.name.replace(/ +/g, \"\")}`}>\n          <img className={props.isGameLost ? \"img-shake m-2 img-fluid\" : \"none m-3 img-fluid\"}\n            alt={props.name}  \n            src={props.image} \n            onClick = {() => \n              { \n                props.handleClicked(props.id, props.name.replace(/ +/g, \"\"));\n              }\n            }\n            onMouseEnter ={ () =>\n              {\n                props.handleMouseEnter(props.name.replace(/ +/g, \"\"));\n              }\n            }\n            onMouseLeave ={ () =>\n              {\n                props.handleMouseLeave(props.name.replace(/ +/g, \"\"));\n              } \n            }\n          />\n        </div>\n        {/*<div className=\"content\">\n          <ul>\n          <li>\n              <strong>ID:</strong> {props.id}\n            </li>\n            <li>\n              <strong>Name:</strong> {props.name}\n            </li>\n            <li>\n              <strong>Occupation:</strong> {props.occupation}\n            </li>\n            <li>\n              <strong>Location:</strong> {props.location}\n            </li>\n            <li>\n              <strong>Clicked: {value}</strong>\n            </li>\n            <li>\n              <strong>isGameLost: {isGameLost}</strong>\n            </li>\n          </ul>\n          </div>*/}\n      </div>\n    );//return\n};//function\n\nexport default friendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header(props){\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark fixed-top text-center\">\r\n                <ul className=\"navbar-nav mx-auto\">\r\n                    <li className=\"brand nav-item\"><a href=\"/spidey-click/\"><h3 className=\"icon\">@</h3></a></li>\r\n                    <li className=\"nav-item\"><p className=\"instructions\" id=\"msg\">Click an image to begin!</p></li>\r\n                    <li className=\"nav-item\"><h3 className=\"score\">Score: {props.score} | Top Score: {props.topScore}</h3> </li>\r\n                </ul>\r\n            </nav> \r\n            <header className=\"header\"></header>\r\n        </React.Fragment>\r\n                   \r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport logo from './images/logo.svg';\r\n\r\nfunction Footer(props){\r\n    return (\r\n        <footer className=\"footer fixed-bottom text-center\">\r\n            <div className=\"footer-container mx-auto\">\r\n                {/* <span className=\"text-muted\">Place sticky footer content here.</span> */}\r\n                {/* <span className=\"text-muted mx-auto\"> */}\r\n                <ul>\r\n                    <li><img alt=\"react\" className=\"logo\" src={logo}/><p className=\"score\">Spidey Click</p></li>\r\n                    <li><span>Â©<p className=\"instructions\"> 2019 Tony Lockhart</p></span></li>\r\n                </ul>\r\n                {/* </span> */}\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport FriendCard from \"./components/FriendCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\n//import friends from \"./friends.json\";\r\nimport friends from \"./heroes.json\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  constructor() {\r\n    super();\r\n    this.highScoreArr = [];\r\n  }\r\n  state = {\r\n    friends,\r\n    score: 0,\r\n    topScore: 0,\r\n    isGameLost: false\r\n  };\r\n\r\n  // function gets called when the page loads and data is set to not clicked\r\n  componentDidMount() {\r\n    // reorders the dataarray on state changes\r\n    this.setState({ friends: this.setFriends(this.state.friends) });\r\n  }\r\n\r\n  //Add the new element CLICKED to the JSON file and set to false when the page loads\r\n  setFriends = (data) => {\r\n    const dataWithClick = data.map(item => ({ ...item, clicked: false }));\r\n    return dataWithClick;\r\n  };\r\n\r\n  //Reset clicked element back to false in JSON when user looses or wins\r\n  resetFriends = (data) => {\r\n    const resetClickedData = data.map(item => (item.clicked = false));\r\n    return resetClickedData;\r\n  };\r\n\r\n  updateFriendClick = (data, id, elemClass) => {\r\n    //Has an item been clicked once:\r\n    let imgClickedOnce = false;\r\n    let updatedData = data.map(item => {\r\n      // eslint-disable-next-line no-unused-expressions\r\n      //Win Condition\r\n      if ((item.id === id) && (!item.clicked)) {\r\n        imgClickedOnce = true;\r\n        item.clicked = 'true';\r\n        this.incrementScore();\r\n        //console.log(\"ITEM = \",item);\r\n        //NOTE: ITEM MUST BE RETURNED\r\n        return item;\r\n      }//if \r\n      //Loose Condition\r\n      else if ((item.id === id) && (item.clicked)) {\r\n        imgClickedOnce = false;\r\n        item.clicked = 'false';\r\n        this.resetScore();\r\n        //NOTE: ITEM MUST BE RETURNED\r\n        return item;\r\n      }\r\n      //No Click Condition\r\n      else {\r\n        //NOTE: ITEM MUST BE RETURNED\r\n        return item;\r\n      }//else*/\r\n    });//updatedData\r\n\r\n    //Shuffle images on the copy of friends data, if the user wins\r\n    if (imgClickedOnce) {\r\n      //Don't Wobble Cards\r\n      this.setState({ isGameLost: false });\r\n      //shuffle the data\r\n      this.shuffleFriends(updatedData, elemClass, this.handleMouseLeave);\r\n    }\r\n    //Reset the clicked element in every element of the friends data\r\n    else if (!imgClickedOnce) {\r\n      //Wobble cards\r\n      this.setState({ isGameLost: true });\r\n      //console.log(\"UPDATEFRIENDCLICK: ALL VALUES ARE BEING RESET\")\r\n      this.setState({ friends: this.resetFriends(updatedData) });\r\n\r\n      //Remove styling on Mobile Devices\r\n      this.handleMouseLeave(elemClass)\r\n    }\r\n    return updatedData;\r\n  };//updateFrienClick\r\n\r\n  //Update the friends data based on wins or loses\r\n  handleClicked = (id, elemClass) => {\r\n    //console.log(\"ID = \" + id);\r\n    let newData = this.updateFriendClick(this.state.friends, id, elemClass);\r\n    //console.log(\"NewData = \"+JSON.stringify(newData));\r\n    this.setState({ friends: newData });\r\n    //console.log(\"HandleClicked: NEW OBJECT = \"+ JSON.stringify(this.state.friends));\r\n  };//handleClicked\r\n\r\n  incrementScore = () => {\r\n    // We always use the setState method to update a component's state\r\n    let newScore = this.state.score + 1;\r\n\r\n     //The Score is one point off\r\n     if(newScore === this.state.friends.length){\r\n      document.getElementById('msg').innerHTML = 'You Won!';\r\n      \r\n      //set score\r\n      this.setState({\r\n        score: newScore\r\n      });\r\n      \r\n      //Set Top Score\r\n      this.setState({\r\n        topScore: this.state.score+1\r\n      });\r\n      \r\n      //Reset score\r\n      this.setState({\r\n        score: 0\r\n      });\r\n\r\n      //Reset JSON DATA TO NOT CLICKED\r\n      this.setState({ friends: this.resetFriends(this.state.friends) });\r\n      //console.log(\"Score = \"+this.state.score, \"DATA = \"+JSON.stringify(this.state.friends));\r\n     }\r\n    else\r\n    {\r\n      this.setState({\r\n        score: newScore\r\n      });\r\n      document.getElementById('msg').innerHTML = 'Correct Guess!';\r\n      //console.log(\"SCORE IS = \" + this.state.score);\r\n      //return newScore;\r\n    }\r\n      \r\n  };\r\n\r\n  //Calculate the best score and resets current score on loss\r\n  resetScore = () => {\r\n    let newScore = 0;\r\n    this.highScoreArr.push(this.state.score);\r\n    this.highScoreArr.sort();\r\n\r\n    let arrSize = this.highScoreArr.length;\r\n    let bestScore = this.highScoreArr[arrSize - 1];\r\n    /*console.log(\"ResetScore: High Score Array = \" + this.highScoreArr + \" Length of Array = \" + this.highScoreArr.length);\r\n    console.log(\"ResetScore: Best Score = \" + bestScore);*/\r\n    this.setState({ topScore: bestScore });\r\n\r\n    /*console.log(\"ResetScore: Top Score = \" + this.state.topScore);*/\r\n    this.setState({ score: newScore });\r\n\r\n    document.getElementById('msg').innerHTML = 'You Lose!';\r\n\r\n    //Reset JSON DATA TO NOT CLICKED\r\n    this.setState({ friends: this.resetFriends(this.state.friends) });\r\n  };\r\n\r\n  //Fisher-Yates Shuffle ALgorithm(NOTE: Manipulate the cloned JSON data before storing in state)\r\n  shuffleFriends = (data, elemClass, handleMouseLeave) => {\r\n    for (let i = data.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [data[i], data[j]] = [data[j], data[i]];\r\n\r\n      //RESET SIZE FOR MOBILE DEVICES\r\n      if(i === data.length-1)\r\n      {\r\n        //Reset size after shuffle on mobile devices:\r\n        handleMouseLeave(elemClass);\r\n      }\r\n    }\r\n  };\r\n\r\n   //Mouse Enter\r\n   handleMouseEnter = (name) => {\r\n    let imgContainer = document.getElementsByClassName(name)[0];\r\n    imgContainer.style.transform = 'scale(1.2)';\r\n    imgContainer.style.border = '1px solid black';\r\n  };\r\n\r\n  handleMouseLeave = (name) => {\r\n    let imgContainer = document.getElementsByClassName(name)[0];\r\n    imgContainer.style.transform = 'scale(1)';\r\n    imgContainer.style.border = 'none';\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Wrapper>\r\n          <div className=\"flex-container main-container\">\r\n          <div className=\"row mx-0\">\r\n          <div className=\"col-12 px-0\">\r\n            <Header score={this.state.score} topScore={this.state.topScore} />\r\n          </div>\r\n          {/*<div className = \"container m-0 w-100\">*/}\r\n          <div className=\"col-9 mx-auto\">\r\n            <div className=\"row justify-content-center align-items-center \">\r\n              {this.state.friends.map(friend => (\r\n                <FriendCard className=\"col-1\"\r\n                  incrementScore={this.incrementScore}\r\n                  resetScore={this.resetScore}\r\n                  handleClicked={this.handleClicked}\r\n                  handleMouseEnter={this.handleMouseEnter}\r\n                  handleMouseLeave={this.handleMouseLeave}\r\n                  id={friend.id}\r\n                  key={friend.id}\r\n                  name={friend.name}\r\n                  image={friend.image}\r\n                  occupation={friend.occupation}\r\n                  location={friend.location}\r\n                  clicked={friend.clicked}\r\n                  isGameLost={this.state.isGameLost}\r\n                />)\r\n              )}\r\n            </div>{/*row*/}\r\n          </div>{/*col*/}\r\n        </div>{/*row*/}\r\n      </div>\r\n        \r\n      <Footer/>\r\n      </Wrapper>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}