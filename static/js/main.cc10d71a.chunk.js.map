{"version":3,"sources":["components/Footer/images/logo.svg","components/FriendCard/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","friendCard","props","react_default","a","createElement","className","isGameLost","alt","name","src","image","onClick","handleClicked","id","Wrapper","children","Header","Fragment","href","score","topScore","Footer","logo","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","friends","setFriends","data","map","item","objectSpread","clicked","resetFriends","updateFriendClick","imgClickedOnce","updatedData","resetScore","incrementScore","setState","shuffleFriends","newData","newScore","highScoreArr","push","sort","arrSize","length","bestScore","i","j","Math","floor","random","_ref","_this2","components_Wrapper","components_Header","friend","FriendCard","key","occupation","location","components_Footer","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc10d71a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\nconst friendCard = (props) => {\n    /*const value = `${props.clicked}`;\n    let isGameLost = `${props.isGameLost}`;*/\n    return (\n      <div className=\"card\">\n        <div className=\"img-container text-center\">\n          <img className={props.isGameLost ? \"img-shake m-2 img-fluid\" : \"none m-3 img-fluid\"}\n            alt={props.name}  \n            src={props.image} \n            onClick = {() => \n              { \n                props.handleClicked(props.id);\n              }\n            }\n            \n          />\n        </div>\n        {/*<div className=\"content\">\n          <ul>\n          <li>\n              <strong>ID:</strong> {props.id}\n            </li>\n            <li>\n              <strong>Name:</strong> {props.name}\n            </li>\n            <li>\n              <strong>Occupation:</strong> {props.occupation}\n            </li>\n            <li>\n              <strong>Location:</strong> {props.location}\n            </li>\n            <li>\n              <strong>Clicked: {value}</strong>\n            </li>\n            <li>\n              <strong>isGameLost: {isGameLost}</strong>\n            </li>\n          </ul>\n          </div>*/}\n      </div>\n    );//return\n};//function\n\nexport default friendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header(props){\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark fixed-top text-center\">\r\n                <ul className=\"navbar-nav mx-auto\">\r\n                    <li className=\"brand nav-item\"><a href=\"/\"><h3 className=\"icon\">@</h3></a></li>\r\n                    <li className=\"nav-item\"><p className=\"instructions\">Click an image to begin!</p></li>\r\n                    <li className=\"nav-item\"><h3 className=\"score\">Score: {props.score} | Top Score: {props.topScore}</h3> </li>\r\n                </ul>\r\n            </nav> \r\n            <header className=\"header\"></header>\r\n        </React.Fragment>\r\n                   \r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport logo from './images/logo.svg';\r\n\r\nfunction Footer(props){\r\n    return (\r\n        <footer className=\"footer fixed-bottom text-center\">\r\n            <div className=\"footer-container mx-auto\">\r\n                {/* <span className=\"text-muted\">Place sticky footer content here.</span> */}\r\n                {/* <span className=\"text-muted mx-auto\"> */}\r\n                <ul>\r\n                    <li><img alt=\"react\" className=\"logo\" src={logo}/><p className=\"score\">Spidey Click</p></li>\r\n                    <li><span>Â©<p className=\"instructions\"> 2018 Tony Lockhart</p></span></li>\r\n                </ul>\r\n                {/* </span> */}\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\n//import friends from \"./friends.json\";\nimport friends from \"./heroes.json\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  constructor() {\n    super();\n    this.highScoreArr = [];\n  }\n  state = {\n    friends,\n    score: 0,\n    topScore: 0,\n    isGameLost: false\n  };\n\n  // function gets called when the page loads\n  componentDidMount() {\n    // reorders the dataarray on state changes\n    this.setState({ friends: this.setFriends(this.state.friends) });\n  }\n\n  //Add the status of the clicked object to the JSON when the page loads\n  setFriends = (data) => {\n    const dataWithClick = data.map(item => ({ ...item, clicked: false }));\n    return dataWithClick;\n  };\n\n  //Reset clicked element back to false in JSON when user looses\n  resetFriends = (data) => {\n    const resetClickedData = data.map(item => (item.clicked = false));\n    return resetClickedData;\n  };\n\n  updateFriendClick = (data, id) => {\n    //Has an item been clicked once:\n    let imgClickedOnce = false;\n    let updatedData = data.map(item => {\n      // eslint-disable-next-line no-unused-expressions\n      //Win Condition\n      if ((item.id === id) && (!item.clicked)) {\n        imgClickedOnce = true;\n        item.clicked = 'true';\n        this.incrementScore();\n        //console.log(\"ITEM = \",item);\n        //NOTE: ITEM MUST BE RETURNED\n        return item;\n      }//if \n      //Loose Condition\n      else if ((item.id === id) && (item.clicked)) {\n        imgClickedOnce = false;\n        item.clicked = 'false';\n        this.resetScore();\n        //NOTE: ITEM MUST BE RETURNED\n        return item;\n      }\n      //No Click Condition\n      else {\n        //NOTE: ITEM MUST BE RETURNED\n        return item;\n      }//else*/\n    });//updatedData\n\n    //Shuffle images on the copy of friends data, if the user wins\n    if (imgClickedOnce) {\n      //Don't Wobble Cards\n      this.setState({ isGameLost: false });\n      //shuffle the data\n      this.shuffleFriends(updatedData);\n    }\n    //Reset the clicked element in every element of the friends data\n    else if (!imgClickedOnce) {\n      //Wobble cards\n      this.setState({ isGameLost: true });\n      //console.log(\"UPDATEFRIENDCLICK: ALL VALUES ARE BEING RESET\")\n      this.setState({ friends: this.resetFriends(updatedData) });\n    }\n    return updatedData;\n  };//updateFrienClick\n\n  //Update the friends data based on wins or loses\n  handleClicked = (id) => {\n    //console.log(\"ID = \" + id);\n    let newData = this.updateFriendClick(this.state.friends, id);\n    //console.log(\"NewData = \"+JSON.stringify(newData));\n    this.setState({ friends: newData });\n    //console.log(\"HandleClicked: NEW OBJECT = \"+ JSON.stringify(this.state.friends));\n  };//handleClicked\n\n  incrementScore = () => {\n    // We always use the setState method to update a component's state\n    let newScore = this.state.score + 1;\n    //console.log(\"NEW SCORE = \" + newScore);\n    //this.setState({ score: `${newScore}`});\n\n    /* this.setState(prevState =>{\n       //Note YOU MUST RETURN THE NUMBER\n       return {score: prevState.score + 1};\n     })*/\n    this.setState({\n      score: newScore\n    });\n    //console.log(\"SCORE IS = \" + this.state.score);\n    //return newScore;\n  };\n  //Calculate the best score and resets score on loss\n  resetScore = () => {\n    let newScore = 0;\n    this.highScoreArr.push(this.state.score);\n    this.highScoreArr.sort();\n\n    let arrSize = this.highScoreArr.length;\n    let bestScore = this.highScoreArr[arrSize - 1];\n    /*console.log(\"ResetScore: High Score Array = \" + this.highScoreArr + \" Length of Array = \" + this.highScoreArr.length);\n    console.log(\"ResetScore: Best Score = \" + bestScore);*/\n    this.setState({ topScore: bestScore });\n    /*console.log(\"ResetScore: Top Score = \" + this.state.topScore);*/\n    this.setState({ score: newScore });\n  };\n\n  //Fisher-Yates Shuffle ALgorithm(NOTE: Manipulate the cloned JSON data before storing in state)\n  shuffleFriends = (data) => {\n    for (let i = data.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [data[i], data[j]] = [data[j], data[i]];\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <div className=\"flex-container main-container\">\n          <div className=\"row mx-0\">\n          <div className=\"col-12 px-0\">\n            <Header score={this.state.score} topScore={this.state.topScore} />\n          </div>\n          {/*<div className = \"container m-0 w-100\">*/}\n          <div className=\"col-9 mx-auto\">\n            <div className=\"row justify-content-center align-items-center \">\n              {this.state.friends.map(friend => (\n                <FriendCard className=\"col-1\"\n                  incrementScore={this.incrementScore}\n                  resetScore={this.resetScore}\n                  handleClicked={this.handleClicked}\n                  id={friend.id}\n                  key={friend.id}\n                  name={friend.name}\n                  image={friend.image}\n                  occupation={friend.occupation}\n                  location={friend.location}\n                  clicked={friend.clicked}\n                  isGameLost={this.state.isGameLost}\n                />)\n              )}\n            </div>{/*row*/}\n          </div>{/*col*/}\n        </div>{/*row*/}\n      </div>\n        \n      <Footer/>\n      </Wrapper>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}